Problem Statement:

Given an array, find the average of all subarrays of ‘K’ contiguous elements in it.

E.g: Array: [1, 3, 2, 6, -1, 4, 1, 8, 2], K=5
Output: [2.2, 2.8, 2.4, 3.6, 2.8]


Approach:

There are two approaches for this problem in my mind. One is brute force in which we can solve this by using nested loops. Time complexity for this one will be O(N*K) where N is size of array and K is subarray size.

Another approach is sliding window: As we can see there will be overlapping elements between the subarrays so we can avoid that computing by using sliding window. We will add the next element to sum and subtract the first element from sum and increase the start and end index pointer.
Thus we can solve this problem in O(N) time complexity.


Solution:


import java.util.Arrays;
import java.util.Scanner;

public class AverageOfSubarrayOfSizeK {
    public static void findAverage(int k,int[] arr,double[] result){

        double sum = 0;
        int i = 0;
        int start = 0,end =0;
        for(end=0;end<k;end++){
            sum+= arr[end];
        }
        i = 0;
        result[i++] = sum/k;
        while(end < arr.length){
            sum -= arr[start];
            start++;
            sum += arr[end];
            end++;
            result[start] = sum/k;
        }
    }
    public static void main(String[] args) {
        System.out.println("Program start");
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter Size of Array:");
        int SizeOfArray = sc.nextInt();
        int[] arr = new int[SizeOfArray];
        System.out.println("Input Array:");
        for(int i=0;i<SizeOfArray;i++){
            arr[i] = sc.nextInt();
        }
        System.out.println("Enter K:");
        int K = sc.nextInt();
        double[] result = new double[K];
        AverageOfSubarrayOfSizeK.findAverage(K, arr, result);
        System.out.println(Arrays.toString(result));
    }
}


