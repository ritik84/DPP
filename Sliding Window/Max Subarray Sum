Problem Statement:

Given an array of positive numbers and a positive number ‘k,’ find the maximum sum of any contiguous subarray of size ‘k’.

Input: [2, 1, 5, 1, 3, 2], k=3 
Output: 9

Input: [2, 3, 4, 1, 5], k=2 
Output: 7


Approach:

Sliding window: As we can see there will be overlapping elements between the subarrays so we can avoid that computing by using sliding window. We will add the next element to sum and subtract the first element from sum and increase the start and end index pointer and compare current sum with max sum and update maxSum with curium value if it is less than curSum..
Thus we can solve this problem in O(N) time complexity.


Solution:


import java.util.Scanner;

import static sun.swing.MenuItemLayoutHelper.max;

public class MaximumSubarraySumOfSizeK {
    public static int findMaxSubarraySum(int K, int[] arr){
        int sum = 0;
        int maxSum = Integer.MIN_VALUE;
        int start = 0,end = 0;
        for(end = 0;end <K;end++){
            sum+=arr[end];
        }
        maxSum = max(maxSum,sum);
        while(end < arr.length){
            sum -= arr[start++];
            sum+= arr[end++];
            maxSum = max(maxSum,sum);
        }
        return maxSum;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int sizeOfArray = sc.nextInt();
        int[] arr = new int[sizeOfArray];
        for(int i=0;i<sizeOfArray;i++){
            arr[i] = sc.nextInt();
        }
        int K = sc.nextInt();
        System.out.println(MaximumSubarraySumOfSizeK.findMaxSubarraySum(K,arr));

    }
}


